//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.WCFService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCats", ReplyAction="http://tempuri.org/IService1/GetCatsResponse")]
        ClassLibrary.Cat[] GetCats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCats", ReplyAction="http://tempuri.org/IService1/GetCatsResponse")]
        System.Threading.Tasks.Task<ClassLibrary.Cat[]> GetCatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCat", ReplyAction="http://tempuri.org/IService1/AddCatResponse")]
        void AddCat(ClassLibrary.Cat phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCat", ReplyAction="http://tempuri.org/IService1/AddCatResponse")]
        System.Threading.Tasks.Task AddCatAsync(ClassLibrary.Cat phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdCat", ReplyAction="http://tempuri.org/IService1/UpdCatResponse")]
        void UpdCat(ClassLibrary.Cat phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdCat", ReplyAction="http://tempuri.org/IService1/UpdCatResponse")]
        System.Threading.Tasks.Task UpdCatAsync(ClassLibrary.Cat phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DelCat", ReplyAction="http://tempuri.org/IService1/DelCatResponse")]
        bool DelCat(ClassLibrary.Cat phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DelCat", ReplyAction="http://tempuri.org/IService1/DelCatResponse")]
        System.Threading.Tasks.Task<bool> DelCatAsync(ClassLibrary.Cat phone);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.WCFService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.WCFService.IService1>, Client.WCFService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClassLibrary.Cat[] GetCats() {
            return base.Channel.GetCats();
        }
        
        public System.Threading.Tasks.Task<ClassLibrary.Cat[]> GetCatsAsync() {
            return base.Channel.GetCatsAsync();
        }
        
        public void AddCat(ClassLibrary.Cat phone) {
            base.Channel.AddCat(phone);
        }
        
        public System.Threading.Tasks.Task AddCatAsync(ClassLibrary.Cat phone) {
            return base.Channel.AddCatAsync(phone);
        }
        
        public void UpdCat(ClassLibrary.Cat phone) {
            base.Channel.UpdCat(phone);
        }
        
        public System.Threading.Tasks.Task UpdCatAsync(ClassLibrary.Cat phone) {
            return base.Channel.UpdCatAsync(phone);
        }
        
        public bool DelCat(ClassLibrary.Cat phone) {
            return base.Channel.DelCat(phone);
        }
        
        public System.Threading.Tasks.Task<bool> DelCatAsync(ClassLibrary.Cat phone) {
            return base.Channel.DelCatAsync(phone);
        }
    }
}
