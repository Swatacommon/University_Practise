---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1)Client_Server_3_tier
Реализовать клиент-серверную архитектуру
Использовал клиент на WebForms который делает HTTP запросы на простейший ASP сервер с одним
http-обработчиком, который эти запросы принимает, обрабатывает и заносит данные в БД (Microsoft SQL Server)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)SOA_acrhitecture
Реализовать SOA архитектуру 
Использовал asmx-сервис, который хостится на IIS express при запуске проекта SOA_architecture
Так же использовал WCF сервис, который self-hosting на консольном приложении (HostForWCF)
Клиент (Client) сделан на WebForms, оба сервиса подключаются к Клиенту, он получает WSDL-ки и генерируют прокси классы для взаимодействия с сервисами.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3)MVC_architecture
Реализовать MVC архитектуру
Использовался проект ASP.NET, реализовывается обычно. Базы данных никакой не юзается, чисто
информация сериализуется в json файл и обратно.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4)MVP_architecutre
Реализовать MPV архитектуру
Использовался WPF проект. Модель данных находится в библиотеке классов MVP_architecture.DataAccess. 
Реализована логика обновлене записей модели. При нажатии Update сработает обработчик IProjectView.ProjectUpdated, который вызовет метод ProjectsPresenter.view_ProjectUpdated()
После обновления модели срабатывает обработчик IProjectsModel.ProjectUpdated, который, через Presenter, обновляет интерфейс.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------